
// Generating / adding to model states
var newState = function(geo) {
	// Assume availability of global 'voxparams'
	return ModelStates.Compositional.Voxelizing.create(voxparams, geo);
};


// ----------------------------------------------------------------------------

// var stopThresh = 0.1;
var stopThresh = 0.05;

var tmp = Object.new(THREE.Vector3);
var branch = function(origradius, frame, i, depth, prev) {
	// Only generate stuff if it's not too small to matter
	if (frame.radius / origradius >= stopThresh) {
		var uprot = gaussian(0, Math.PI / 12);
		var leftrot = gaussian(0, Math.PI / 12);
		var len = uniform(3, 5) * frame.radius;
		var endradius = uniform(0.5, 0.9) * frame.radius;

		// Figure out where to split the segment
		// (This is so the part we branch from is a pure conic section)
		var nextframe = tree.advanceFrame(frame, uprot, leftrot, len, endradius);
		var splitframe = tree.findSplitFrame(frame, nextframe);

		// Place geometry
		var leafState = newState(tree.treeSegment(prev, frame, splitframe, nextframe));

		// Recursively branch
		var branchState = (function() {
			if (flip(tree.branchProb(depth, i))) {
				// Theta mean/variance based on avg weighted by 'up-facing-ness'
				var thetaMuSigma = tree.estimateThetaDistrib(splitframe, nextframe);
				var theta = gaussian(thetaMuSigma[0], thetaMuSigma[1]);
				var maxbranchradius = tmp.copy(nextframe.center).sub(splitframe.center)
				                         .multiplyScalar(0.5).length();
				var branchradius = Math.min(uniform(0.9, 1) * nextframe.radius, maxbranchradius);
				var bframeAndPrev = tree.branchFrame(splitframe, nextframe, 0.5, theta, branchradius);
				var bframe = bframeAndPrev.frame;
				var bprev = bframeAndPrev.prev;
				var recurse = branch(origradius, bframe, 0, depth + 1, bprev);
				// var recurse = incrementalize(branch, [origradius, bframe, 0, depth + 1, bprev]);
				return leafState.combine(recurse);
			} else return leafState;
		})();

		// Keep generating same branch?
		if (flip(tree.continueProb(i))) {
			var recurse = branch(origradius, nextframe, i + 1, depth, null);
			// var recurse = incrementalize(branch, [origradius, nextframe, i + 1, depth, null]);
			return branchState.combine(recurse);
		} else {
			return branchState;
		}
	}
};


var generate = function() {
	var startframe = {
		center: Object.new(THREE.Vector3, 0, 0, 0),
		forward: Object.new(THREE.Vector3, 0, 1, 0),
		up: Object.new(THREE.Vector3, 0, 0, -1),
		radius: uniform(1.5, 2),
		v: 0
	};
	var modelstate = branch(startframe.radius, startframe, 0, 0, null);
	// var modelstate = incrementalize(branch, [startframe.radius, startframe, 0, 0, null]);
	factor(modelstate.score);
	return modelstate;
};


// ----------------------------------------------------------------------------


var N = 2000;
// var N = 1;
// return MH(generate, N, true, true);
// return HashMH(generate, N, {justSample: true, verbose: true, onlyMAP: true});
// return HashMH(generate, N, {justSample: true, verbose: true, doFullRerun: true, onlyMAP: true});
return IncrementalMH(generate, N, {justSample: true, verbose: true, onlyMAP: true});
// return IncrementalMH(generate, N, {justSample: true, verbose: true, onlyMAP: true, dontAdapt: true});
// return IncrementalMH(generate, N, {justSample: true, verbose: true, onlyMAP: true, dontAdapt: true, doFullRerun: true});


