
// Generating / adding to model states
var newState = function(geo)
{
	// Assume availability of global 'voxparams'
	return ModelStates.Compositional.Voxelizing.create(voxparams, geo);
}


// ----------------------------------------------------------------------------


var uniformrel = function(lo, hi)
{
	var u = uniform(0, 1);
	return (1-u)*lo + u*hi;
}

var wi = function(i, w) { return Math.exp(-w*i); }


// ----------------------------------------------------------------------------

var addBoxBodySeg = function(rearz, prev)
{
	// Must be bigger than the previous segment, if the previous
	//   segment was not a box (i.e. was a cylinder-type thing)
	var xl = uniform(1, 3);
	var yl = uniform(.5, 1) * xl;
	var xlen = (prev.type === BodyType.Box) ? xl : Math.max(xl, prev.xlen);
	var ylen = (prev.type === BodyType.Box) ? yl : Math.max(yl, prev.ylen);
	var zlen = uniform(2, 5);
	var geo = Geo.Shapes.Box(0, 0, rearz + 0.5*zlen, xlen, ylen, zlen);
	var state = newState(geo);
	return { state: state, xlen: xlen, ylen: ylen, zlen: zlen, type: BodyType.Box };
}

var addCylinderBodySeg = function(rearz, prev, isnose)
{
	// Must be smaller than previous segment, if that was a box
	var limitrad = 0.5*Math.min(prev.xlen, prev.ylen);
	var minrad = (prev.type === BodyType.Box) ? 0.4*limitrad : 0.3;
	var maxrad = (prev.type === BodyType.Box) ? limitrad : 1.25;
	var radius = uniformrel(minrad, maxrad);
	var xlen = radius*2;
	var ylen = radius*2;
	var zlen = isnose ? uniform(1, 3) : uniform(2, 5);
	var geo = isnose ? SpaceshipGeo.BodyCylinder(rearz, zlen, radius,
												 radius*uniform(.25, .75))
					 : SpaceshipGeo.BodyCylinder(rearz, zlen, radius);
	var state = newState(geo);
	return { state: state, xlen: xlen, ylen: ylen, zlen: zlen, type: BodyType.Cylinder };
}

var addClusterBodySeg = function(rearz, prev, isnose)
{
	// Must be smaller than previous segment, if that was a box
	var limitrad = 0.25*Math.min(prev.xlen, prev.ylen);
	var minrad = (prev.type === BodyType.Box) ? 0.4*limitrad : 0.5*0.3;
	var maxrad = (prev.type === BodyType.Box) ? limitrad : 0.5*1.25;
	var radius = uniformrel(minrad, maxrad);
	var xlen = radius*4;
	var ylen = radius*4;
	var zlen = uniform(2, 5);
	var geo = SpaceshipGeo.BodyCluster(rearz, zlen, radius);
	var state = newState(geo);
	return { state: state, xlen: xlen, ylen: ylen, zlen: zlen, type: BodyType.Cluster };
}

var BodyType = { Box: 0, Cylinder: 1, Cluster: 2, N: 3 }
var addBodySeg = function(rearz, prev)
{	
	var type = randomInteger(BodyType.N);
	if (type == BodyType.Box)
		return addBoxBodySeg(rearz, prev)
	else if (type == BodyType.Cylinder)
		return addCylinderBodySeg(rearz, prev);
	else if (type == BodyType.Cluster)
		return addClusterBodySeg(rearz, prev);
}

var addBoxWingSeg = function(xbase, zlo, zhi)
{
	var zbase = uniformrel(zlo, zhi);
	var xlen = uniform(0.25, 2.0);
	var ylen = uniform(0.25, 1.25);
	var zlen = uniform(0.5, 4.0);
	var geo = SpaceshipGeo.WingBoxes(xbase, zbase, xlen, ylen, zlen);
	var state = newState(geo);
	var gunstate = (function()
	{
		if (flip(0.5))
			return state.combine(addWingGuns(xbase, zbase, xlen, ylen, zlen));
		else return state;
	})();
	return { state: gunstate, xlen: xlen, ylen: ylen, zlen: zlen, zbase: zbase };
}

var addWingGuns = function(xbase, zbase, xlen, ylen, zlen)
{
	var gunlen = uniform(1, 1.2)*zlen;
	var gunxbase = xbase + 0.5*xlen;
	var gunybase = 0.5*ylen;
	var geo = SpaceshipGeo.WingGuns(gunxbase, gunybase, zbase, gunlen);
	return newState(geo);
};

var addCylinderWingSeg = function(xbase, zlo, zhi)
{
	var zbase = uniformrel(zlo, zhi);
	var radius = uniform(.15, .7);
	var xlen = 2*radius;
	var ylen = 2*radius;
	var zlen = uniform(1, 5);
	var geo = SpaceshipGeo.WingCylinders(xbase, zbase, zlen, radius);
	var state = newState(geo);
	return { state: state, xlen: xlen, ylen: ylen, zlen: zlen, zbase: zbase };
}

var WingType = { Box: 0, Cylinder: 1, N: 2 }
var addWingSeg = function(xbase, zlo, zhi)
{
	var type = randomInteger(WingType.N);
	if (type == WingType.Box)
		return addBoxWingSeg(xbase, zlo, zhi);
	else if (type == WingType.Cylinder)
		return addCylinderWingSeg(xbase, zlo, zhi);
}

var addWings = function(i, xbase, zlo, zhi)
{
	var rets = addWingSeg(xbase, zlo, zhi);
	var xlen = rets.xlen;
	var ylen = rets.ylen;	
	var zlen = rets.zlen;
	var zbase = rets.zbase;
	var state = rets.state;
	if (flip(wi(i, 0.6)))
		// return state.combine(addWings(i+1, xbase+xlen, zbase-0.5*zlen, zbase+0.5*zlen));
		return state.combine(incrementalize(addWings, [i+1, xbase+xlen, zbase-0.5*zlen, zbase+0.5*zlen]));
	else return state;
}

var addFin = function(i, ybase, zlo, zhi, xmax)
{
	var xlen = uniform(0.5, 1.0) * xmax;
	var ylen = uniform(0.1, 0.5);
	var zlen = uniform(0.5, 1.0) * (zhi - zlo);
	var zbase = 0.5*(zlo + zhi);
	var geo = Geo.Shapes.Box(0, ybase + 0.5*ylen, zbase, xlen, ylen, zlen);
	var state = newState(geo);
	if (flip(wi(i, 0.2)))
		// return state.combine(addFin(i+1, ybase+ylen, zbase-0.5*zlen, zbase+0.5*zlen, xlen));
	return state.combine(incrementalize(addFin, [i+1, ybase+ylen, zbase-0.5*zlen, zbase+0.5*zlen, xlen]));
	else return state;
}

var addBody = function(i, rearz, prev)
{
	// Gen new body segment
	var rets = addBodySeg(rearz, prev);
	var xlen = rets.xlen;
	var ylen = rets.ylen;
	var zlen = rets.zlen;
	var bodyType = rets.type;
	var bodystate = rets.state;
	// Gen wings?
	var wingprob = wi(i+1, 0.5);
	var wingstate = (function()
	{
		if (flip(wingprob))
			// return bodystate.combine(addWings(0, 0.5*xlen, rearz+0.5, rearz+zlen-0.5));
			return bodystate.combine(incrementalize(addWings, [0, 0.5*xlen, rearz+0.5, rearz+zlen-0.5]));
		else return bodystate;
	})();
	// Gen fin?
	var finprob = 0.7;
	var finstate = (function()
	{
		if (flip(finprob))
			// return wingstate.combine(addFin(0, 0.5*ylen, rearz, rearz+zlen, 0.6*xlen));
			return wingstate.combine(incrementalize(addFin, [0, 0.5*ylen, rearz, rearz+zlen, 0.6*xlen]));
		else return wingstate;
	})();
	// Continue generating?
	var nextprev = {type: bodyType, xlen: xlen, ylen: ylen};
	if (flip(wi(i, 0.4)))
	{
		// return finstate.combine(addBody(i+1, rearz+zlen, nextprev));
		return finstate.combine(incrementalize(addBody, [i+1, rearz+zlen, nextprev]));
	}
	else
	{	
		// TODO: Also have a box nose, like the old version?
		if (flip(0.75))
			return finstate.combine(addCylinderBodySeg(rearz+zlen, nextprev, true));
		else return finstate;
	}
}

var generate = function()
{
	// var modelstate = addBody(0, -5, {type: null, xlen: 0, ylen: 0});
	var modelstate = incrementalize(addBody, [0, -5, {type: null, xlen: 0, ylen: 0}]);
	factor(modelstate.score);
	return modelstate;
}


// ----------------------------------------------------------------------------

// var N = 1;
var N = 1000;
// return HashMH(generate, N, {justSample: true});
return IncrementalMH(generate, N, {justSample: true});




