
// Create a new model state
var newState = function()
{
	// State which tracks the voxelized model
	// (Assumes availability of global 'voxparams')
	return ModelStates.Sequential.Voxelizing.create(voxparams);

	// Simpler state which just tracks self-intersections
	// return ModelStates.Sequential.NonIntersecting.create();
}

// Add geometry to an existing model state
var addGeometry = function(geo)
{
	var currstate = globalStore.modelState;
	var newstate = currstate.addGeometry(geo);
	globalStore.modelState = newstate;
	// This extra bit of logic is to prevent NaNs (from -Infinity - -Infinity calculations)
	var score = (currstate.score == -Infinity) ? -Infinity : (newstate.score - currstate.score);
	factor(score);
}


// ----------------------------------------------------------------------------


var uniformrel = function(lo, hi)
{
	var u = uniform(0, 1);
	return (1-u)*lo + u*hi;
}

var wi = function(i, w) { return Math.exp(-w*i); }


// ----------------------------------------------------------------------------

// Subroutines for random spaceship geometry generation.

var addBoxBodySeg = function(rearz, prev)
{
	// Must be bigger than the previous segment, if the previous
	//   segment was not a box (i.e. was a cylinder-type thing)
	var xl = uniform(1, 3);
	var yl = uniform(.5, 1) * xl;
	var xlen = (prev.type === BodyType.Box) ? xl : Math.max(xl, prev.xlen);
	var ylen = (prev.type === BodyType.Box) ? yl : Math.max(yl, prev.ylen);
	var zlen = uniform(2, 5);
	var geo = Geo.Shapes.Box(0, 0, rearz + 0.5*zlen, xlen, ylen, zlen);
	addGeometry(geo);
	return { xlen: xlen, ylen: ylen, zlen: zlen, type: BodyType.Box };
}

var addCylinderBodySeg = function(rearz, prev, isnose)
{
	// Must be smaller than previous segment, if that was a box
	var limitrad = 0.5*Math.min(prev.xlen, prev.ylen);
	var minrad = (prev.type === BodyType.Box) ? 0.4*limitrad : 0.3;
	var maxrad = (prev.type === BodyType.Box) ? limitrad : 1.25;
	var radius = uniformrel(minrad, maxrad);
	var xlen = radius*2;
	var ylen = radius*2;
	var zlen = isnose ? uniform(1, 3) : uniform(2, 5);
	var geo = isnose ? SpaceshipGeo.BodyCylinder(rearz, zlen, radius,
												 radius*uniform(.25, .75))
					 : SpaceshipGeo.BodyCylinder(rearz, zlen, radius);
	addGeometry(geo);
	return { xlen: xlen, ylen: ylen, zlen: zlen, type: BodyType.Cylinder };
}

var addClusterBodySeg = function(rearz, prev, isnose)
{
	// Must be smaller than previous segment, if that was a box
	var limitrad = 0.25*Math.min(prev.xlen, prev.ylen);
	var minrad = (prev.type === BodyType.Box) ? 0.4*limitrad : 0.5*0.3;
	var maxrad = (prev.type === BodyType.Box) ? limitrad : 0.5*1.25;
	var radius = uniformrel(minrad, maxrad);
	var xlen = radius*4;
	var ylen = radius*4;
	var zlen = uniform(2, 5);
	var geo = SpaceshipGeo.BodyCluster(rearz, zlen, radius);
	addGeometry(geo);
	return { xlen: xlen, ylen: ylen, zlen: zlen, type: BodyType.Cluster };
}

var BodyType = { Box: 0, Cylinder: 1, Cluster: 2, N: 3 }
var addBodySeg = function(rearz, prev)
{	
	var type = randomInteger(BodyType.N);
	if (type == BodyType.Box)
		return addBoxBodySeg(rearz, prev)
	else if (type == BodyType.Cylinder)
		return addCylinderBodySeg(rearz, prev);
	else if (type == BodyType.Cluster)
		return addClusterBodySeg(rearz, prev);
}

var addBoxWingSeg = function(xbase, zlo, zhi)
{
	var zbase = uniformrel(zlo, zhi);
	var xlen = uniform(0.25, 2.0);
	var ylen = uniform(0.25, 1.25);
	var zlen = uniform(0.5, 4.0);
	var geo = SpaceshipGeo.WingBoxes(xbase, zbase, xlen, ylen, zlen);
	addGeometry(geo);
	future(function()
	{
		if (flip(0.5))
			addWingGuns(xbase, zbase, xlen, ylen, zlen);
	});
	return { xlen: xlen, ylen: ylen, zlen: zlen, zbase: zbase };
}

var addWingGuns = function(xbase, zbase, xlen, ylen, zlen)
{
	var gunlen = uniform(1, 1.2)*zlen;
	var gunxbase = xbase + 0.5*xlen;
	var gunybase = 0.5*ylen;
	var geo = SpaceshipGeo.WingGuns(gunxbase, gunybase, zbase, gunlen);
	addGeometry(geo);
};

var addCylinderWingSeg = function(xbase, zlo, zhi)
{
	var zbase = uniformrel(zlo, zhi);
	var radius = uniform(.15, .7);
	var xlen = 2*radius;
	var ylen = 2*radius;
	var zlen = uniform(1, 5);
	var geo = SpaceshipGeo.WingCylinders(xbase, zbase, zlen, radius);
	addGeometry(geo);
	return { xlen: xlen, ylen: ylen, zlen: zlen, zbase: zbase };
}

var WingType = { Box: 0, Cylinder: 1, N: 2 }
var addWingSeg = function(xbase, zlo, zhi)
{
	var type = randomInteger(WingType.N);
	if (type == WingType.Box)
		return addBoxWingSeg(xbase, zlo, zhi);
	else if (type == WingType.Cylinder)
		return addCylinderWingSeg(xbase, zlo, zhi);
}

var addWings = function(i, xbase, zlo, zhi)
{
	var rets = addWingSeg(xbase, zlo, zhi);
	var xlen = rets.xlen;
	var ylen = rets.ylen;	
	var zlen = rets.zlen;
	var zbase = rets.zbase;
	future(function()
	{
		if (flip(wi(i, 0.6)))
			addWings(i+1, xbase+xlen, zbase-0.5*zlen, zbase+0.5*zlen);
	});
}

var addFin = function(i, ybase, zlo, zhi, xmax)
{
	var xlen = uniform(0.5, 1.0) * xmax;
	var ylen = uniform(0.1, 0.5);
	var zlen = uniform(0.5, 1.0) * (zhi - zlo);
	var zbase = 0.5*(zlo + zhi);
	var geo = Geo.Shapes.Box(0, ybase + 0.5*ylen, zbase, xlen, ylen, zlen);
	addGeometry(geo);
	future(function()
	{
		if (flip(wi(i, 0.2)))
			addFin(i+1, ybase+ylen, zbase-0.5*zlen, zbase+0.5*zlen, xlen);
	});
}

var addBody = function(i, rearz, prev)
{
	// Gen new body segment
	var rets = addBodySeg(rearz, prev);
	var xlen = rets.xlen;
	var ylen = rets.ylen;
	var zlen = rets.zlen;
	var bodyType = rets.type;
	// Gen wings?
	var wingprob = wi(i+1, 0.5);
	future(function()
	{
		if (flip(wingprob))
			addWings(0, 0.5*xlen, rearz+0.5, rearz+zlen-0.5);
	});
	// Gen fin?
	var finprob = 0.7;
	future(function()
	{
		if (flip(finprob))
			addFin(0, 0.5*ylen, rearz, rearz+zlen, 0.6*xlen);
	});
	// Continue generating?
	var nextprev = {type: bodyType, xlen: xlen, ylen: ylen};
	future(function()
	{
		if (flip(wi(i, 0.4)))
		{
			addBody(i+1, rearz+zlen, nextprev);
		}
		else
		{	
			// TODO: Also have a box nose, like the old version?
			if (flip(0.75))
				addCylinderBodySeg(rearz+zlen, nextprev, true);
		}
	});
}

// ----------------------------------------------------------------------------

// This is the 'main' function of the program
var generate = function()
{
	globalStore.modelState = newState();
	future(function()
	{
		addBody(0, -5, {type: null, xlen: 0, ylen: 0});
	});
	finishall();
	return globalStore.modelState;
}

// Generate results by forward sampling (don't enforce constraints)
var generateByForwardSampling = function()
{
	setFuturePolicy('deterministic');
	return ParticleFilter(generate, 1, {justSample: true, verbose: Verbose.SMC});
}

// Generate results by SOSMC
var generateResultsBySOSMC = function()
{
	setFuturePolicy('stochastic');
	return ParticleFilter(generate, 300, {justSample: true, verbose: Verbose.SMC});
}

// Generate results by MH
var generateResultsByMH = function()
{
	setFuturePolicy('deterministic');
	var N = 500;
	return MH(generate, N, {justSample: true, verbose: Verbose.MH})
}

// ----------------------------------------------------------------------------

// return generateByForwardSampling()
return generateResultsBySOSMC()
// return generateResultsByMH()

// Source code for this demo can be found at:
// https://github.com/dritchie/web-procmod







