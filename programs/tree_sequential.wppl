
// Generating / adding to model states
var newState = function() {
	// Assume availability of global 'voxparams'
	return ModelStates.Sequential.Voxelizing.create(voxparams);
};

var addGeometry = function(geo) {
	var currstate = globalStore.modelState;
	var newstate = currstate.addGeometry(geo);
	globalStore.modelState = newstate;
	// This extra bit of logic is to prevent NaNs (from -Infinity - -Infinity calculations)
	var score = (currstate.score == -Infinity) ? -Infinity : (newstate.score - currstate.score);
	factor(score);
};


// ----------------------------------------------------------------------------


var tmp = Object.new(THREE.Vector3);
var branch = function(origradius, frame, i, depth, prev) {
	// Only generate stuff if it's not too small to matter
	if (frame.radius / origradius >= 0.1) {
		var uprot = gaussian(0, Math.PI / 12);
		var leftrot = gaussian(0, Math.PI / 12);
		var len = uniform(3, 5) * frame.radius;
		var endradius = uniform(0.7, 0.9) * frame.radius;

		// Figure out where to split the segment
		// (This is so the part we branch from is a pure conic section)
		var nextframe = tree.advanceFrame(frame, uprot, leftrot, len, endradius);
		var splitframe = tree.findSplitFrame(frame, nextframe);

		// Place geometry
		addGeometry(tree.treeSegment(prev, frame, splitframe, nextframe));

		// Recursively branch
		future(function() {
			if (flip(tree.branchProb(depth, i))) {
				// Theta mean/variance based on avg weighted by 'up-facing-ness'
				var thetaMuSigma = tree.estimateThetaDistrib(splitframe, nextframe);
				var theta = gaussian(thetaMuSigma[0], thetaMuSigma[1]);
				var maxbranchradius = tmp.copy(nextframe.center).sub(splitframe.center)
				                         .multiplyScalar(0.5).length();
				var branchradius = Math.min(uniform(0.9, 1) * nextframe.radius, maxbranchradius);
				var bframeAndPrev = tree.branchFrame(splitframe, nextframe, 0.5, theta, branchradius);
				var bframe = bframeAndPrev.frame;
				var bprev = bframeAndPrev.prev;
				branch(origradius, bframe, 0, depth + 1, bprev);
			}
		});

		// Keep generating same branch?
		future(function() {
			if (flip(tree.continueProb(i)))
				branch(origradius, nextframe, i + 1, depth, null);
		});
	}
};


var generate = function() {
	globalStore.modelState = newState();
	var startframe = {
		center: Object.new(THREE.Vector3, 0, 0, 0),
		forward: Object.new(THREE.Vector3, 0, 1, 0),
		up: Object.new(THREE.Vector3, 0, 0, -1),
		radius: uniform(1.5, 2),
		v: 0
	};
	branch(startframe.radius, startframe, 0, 0, null);
	finishall();
	return globalStore.modelState;
};


// ----------------------------------------------------------------------------


// var N = 1000;
// // var N = 1;
// return HashMH(generate, N, {justSample: true, verbose: true});


setFuturePolicy('stochastic');
return ParticleFilter(generate, 300, {justSample: true, verbose: Verbose.SMC});


